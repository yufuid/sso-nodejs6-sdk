玉符SDK
======
玉符SDK集成了签署和验证JWT令牌的功能，使得身份提供者（IDP）和服务提供者（SP）
只需要用很少的代码就可以轻松将玉符提供的单点登录和其他功能集成到现有的服务之中。

---
## 使用SDK之前
* 作为服务提供者（SP），可以使用玉符SDK验证JWT令牌的有效性（包括有效期、签名等），成功后进行相应的建权。
  >需从玉符注册并获取相应的服务提供者ID，并获取玉符颁发的公钥文件

* 如果服务提供者（SP）还为用户/租户提供身份联合、第三方登录的功能，可以使用玉符SDK生成并签署JWT令牌，并送到玉符服务器上认证并跳转到第三方身份提供者。
  >需额外生成pem格式的公私钥文件。

* 作为身份提供者（IDP），可以使用玉符SDK为用户生成并签署JWT令牌，并送到玉符服务器上认证并登录到第三方服务提供商。
  >需额外从玉符注册并获取相应的身份提供者ID，并生成pem格式的公私钥文件。

---
## 安装SDK

1. 添加JWT令牌标准的依赖库(如已安装，可跳过此步), 在项目根目录下运行:

  <code>npm install jsonwebtoken@5.7.0 -S </code>

  > 或者可以在项目`package.json`文件中的`dependencies`加入`"jsonwebtoken": "^5.7.0"`，然后在根目录下运行`npm install`安装。

* 将`yufusdk`文件夹添加到项目中, 在代码中载入后调用
  <code>
    var yufusdk = require('./yufusdk');
  </code>
* 把从玉符获得的公私钥文件添加到项目中, 假定路径为 `{PATH/TO/KEYS}`

---
## 使用SDK
**#服务提供者（SP)**
1. 初始化SDK
  <code>
    var serviceProvider = yufusdk.init({
        type: 'sp',
        expiresIn: 5 * 60,                                  // 令牌有效期限
        issuer: 'sp-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',  // 从玉符获取的服务提供者ID
        keys: {
            yufuPublicKey: {                                // 玉符的公钥文件
                kid: 'yufuPublickey',
                path: '{PATH/TO/KEYS}/yufu.public.pem'
            }
            myPrivateKey: {                                 //（\*）对应私钥文件
                kid: 'mykeyid'
                path: '{PATH/TO/KEYS}/sp.private.pem',
            },
            myPublicKey: {                                  //（\*）对应公钥文件
                path: '{PATH/TO/KEYS}/idp.public.pem',
                kid: 'mykeyid'
            },
        }
    });
  </code>
  > \*： 非必填，只有服务提供者（SP）还为用户/租户提供身份联合、第三方登录的功能时才需要填入

2. 实现单点登录：接收并验证JWT令牌的有效性（包括有效期、签名等），验证通过后您进行鉴权（可选）和赋予登录系统等相应权限，否则提示用户登录失败，样例
  <code>
    app.get('/sso', function (req, res) {                  // 假设单点登录端点为'/sso'
        var id_token = req.params.id_token;                // 从URL中获得ID token
        var result;
        try {
            result = serviceProvider.verify(id_token);     // 使用验证玉符SDK实例进行验证, 如果成功会返回包含用户信息的对象，失败则会产生授权错误的异常
        } catch (ex) {
            console.error(ex);
        }
        var user = result.sub;
        var tenant = result.tnt;
        if (checkSubject(user, tenant)) {                  // 对用户和租户进行鉴权
            // var redirectUrl = '/home';
            res.redirect(redirectUrl);                     // 跳转至主页和赋予相应权限(例如创建Session等)
        }
    });
  </code>
  > 配置完成后，单点登录端点就可以验证玉符发放的id_token令牌，例如：
  https://someservice.domain.com/sso?id_token=eyJraWQiOiJDSURQX0tFWUlEIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJzcC14eHh4eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHgiLCJzY29wZSI6Im9wZW5pZCIsImlzcyI6Imlzc3VlciIsInRudCI6Ill1ZnUiLCJzdGF0ZSI6InNvbWUgc3RhdGUgdmFsdWUiLCJleHAiOjE0NzgyNTc5OTIsImlhdCI6MTQ3ODI1NzY5Miwic3BpZCI6InNwLXh4eHh4eHh4LXh4eHgteHh4eC14eHh4LXh4eHh4eHh4eHh4eCIsInNwIjoi546J56ymIn0.Lq8c2O9m4FY8z7C9A3FB1LyK5q3QBrRLwyXlOgVzxP2AvesYh4K8dN6Pe8d3zulvNdcLFEw7JE7fe80ItZ3Jm3lf3_8XFiJEw3fqRrrQyJJSHQi0SjwVrKm13G1czB2zo5PRTskNfIqIWXrUc0l6T2OxXY_1R9cfFO0VHKWxu0zY3mKjtdf8AhugJePhbB4i9C4lACtypbR2hOFYx_7zB-E9Z47BMNY1n4Rszq-ZM9_4BCZPum3tMnXRAms8k57WbGrOLI3O-lRi76qFzUIQuIy38D6qh7feRtCt36yRhVOlxDCZ4_zDnu9p68DOw9LgkQliQmuPCg1PHszr57E-

3. (\*) 为用户/租户提供身份联合、第三方登录的功能，可以在用户请求操作后使用玉符SDK生成并签署JWT令牌，样例
<code>
  app.post('/login/sso', function (req, res) {           // 假设请求登录端点为'/login/sso'
      var idp_id = req.params.idp_id;                    // 从URL中获得 ID token
  });
</code>

**#身份提供者（SP)**
1. 完成SDK安装后，进行初始化
<code>
  var idProvider = yufusdk.init({
      type: 'idp',
      issuer: 'idp-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', // 从玉符获取的身份提供者ID
      expiresIn: 5 * 60,                                  // 令牌有效期限
      keys: {
          yufuPublicKey: {                                // 玉符的公钥文件
              kid: 'yufuPublickey',
              path: '{PATH/TO/KEYS}/yufu.public.pem'
          }
          myPrivateKey: {                                 //（\*）对应私钥文件
              kid: 'mykeyid'
              path: '{PATH/TO/KEYS}/sp.private.pem',
          },
          myPublicKey: {                                  //（\*）对应公钥文件
              path: '{PATH/TO/KEYS}/idp.public.pem',
              kid: 'mykeyid'
          },
      }
  });
</code>
2. 根据用户选取的服务，可以使用玉符SDK为用户生成并签署对应令牌，并向用户发送302跳转登录到第三方服务提供商，代码样式
<code>
  app.post('/sso/service', function (req, res) {
      var username = getCurrentUser();                    // 获得用户名（根据需求，可以对用户进行验证）
      var spId = 'sp-xxxx-xxxx-xxxx-xxxx';                // 从玉符上所注册的第三方服务提供者ID
      var params = {
          subject: username,
          spid: spId,
          state: 'state'                                  // 状态（如无可用`\_`代替）
      };

      var redirectUrl = idProvider.generateRedirectUrl(params);
      res.redirect(redirectUrl);                          // 生成认证链接并进行跳转
  });
</code>
  > 跳转链接会转到玉符服务器上认证，例如：
  https://idp.yufuid.com/v1/sso/authorize?idp_token=eyJraWQiOiJDSURQX0tFWUlEIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJpZHAteHh4eHh4eHgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4Iiwic2NvcGUiOiJvcGVuaWQiLCJpc3MiOiJpc3N1ZXIiLCJ0bnQiOiJZdWZ1Iiwic3RhdGUiOiJzb21lIHN0YXRlIHZhbHVlIiwiZXhwIjoxNDc4MjU3OTkyLCJpYXQiOjE0NzgyNTc2OTIsInNwaWQiOiJzcC14eHh4eHh4eC14eHh4LXh4eHgteHh4eC14eHh4eHh4eHh4eHgiLCJzcCI6IueOieespiJ9.YB_0o_V2w9ZbXBNW_1xBoo2EWo4yyD7XP0_yADb3gxTDTyXqK0K56XYHn4Q5t5ryh9HOhImFrGUSaI8GsznookDtrwkSBKW1ybQxkQzJpfbNJXlphMTGlvg4oM820tjS1WJEdTEhMenYudBPMQkmn7AKuf2gzwVa-UhANtRzV0MlHLCVZGixAKzDG2LxsvMeV-ViPYiGUVZap3gtZxZx4DPhMrFBWw3ztNmF5eKSPOBNjU2xtxXhi9HEWGr3W-XaemuNoecWAEMuAFHuha7XZSopuFrIcI3nFb4U9QuMv_bN2KyuQFk5jOz9jfGxNK3OYLwAhxHa0j8jWyiN5i8mUQ

---
## FAQ

---
## 联系玉符
contact@yufuid.com
